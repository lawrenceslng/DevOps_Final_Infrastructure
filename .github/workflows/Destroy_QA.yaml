name: Destroy QA Environment

on:
  workflow_dispatch:

jobs:
  destroy-qa:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_ACCOUNT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Find QA EC2 instance
        id: find-qa
        run: |
          QA_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=qa-ec2" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "qa_instance_id=$QA_INSTANCE_ID" >> "$GITHUB_OUTPUT"

      - name: Find Bastion Host
        id: find-bastion
        run: |
          BASTION_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=bastion-host" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "bastion_id=$BASTION_ID" >> "$GITHUB_OUTPUT"

      - name: Terminate EC2 Instances
        run: |
          aws ec2 terminate-instances --instance-ids \
            ${{ steps.find-qa.outputs.qa_instance_id }} \
            ${{ steps.find-bastion.outputs.bastion_id }}

      - name: Wait for Instances to Terminate
        run: |
          aws ec2 wait instance-terminated \
            --instance-ids ${{ steps.find-qa.outputs.qa_instance_id }} ${{ steps.find-bastion.outputs.bastion_id }}

      - name: Find ALB
        id: alb
        run: |
          ALB_ARN=$(aws elbv2 describe-load-balancers \
            --names qa-alb \
            --query "LoadBalancers[0].LoadBalancerArn" --output text)
          echo "alb_arn=$ALB_ARN" >> "$GITHUB_OUTPUT"

      - name: Find Target Group
        id: tg
        run: |
          TG_ARN=$(aws elbv2 describe-target-groups \
            --names qa-ec2-tg \
            --query "TargetGroups[0].TargetGroupArn" --output text)
          echo "tg_arn=$TG_ARN" >> "$GITHUB_OUTPUT"

      - name: Find Listener and Delete It
        run: |
          LISTENER_ARN=$(aws elbv2 describe-listeners \
            --load-balancer-arn ${{ steps.alb.outputs.alb_arn }} \
            --query "Listeners[0].ListenerArn" --output text)
          aws elbv2 delete-listener --listener-arn $LISTENER_ARN

      - name: Delete Load Balancer
        run: |
          aws elbv2 delete-load-balancer --load-balancer-arn ${{ steps.alb.outputs.alb_arn }}

      - name: Wait for Load Balancer Deletion
        run: |
          aws elbv2 wait load-balancers-deleted --load-balancer-arns ${{ steps.alb.outputs.alb_arn }}

      - name: Delete Target Group
        run: |
          aws elbv2 delete-target-group --target-group-arn ${{ steps.tg.outputs.tg_arn }}

      - name: Delete Route 53 Record
        run: |
          cat > change-batch.json <<EOF
          {
            "Comment": "Delete A record for QA ALB",
            "Changes": [{
              "Action": "DELETE",
              "ResourceRecordSet": {
                "Name": "qa.codingwithboba.com",
                "Type": "CNAME",
                "TTL": 60,
                "ResourceRecords": [{ "Value": "dummy-placeholder" }]
              }
            }]
          }
          EOF

          CURRENT_ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names qa-alb \
            --query "LoadBalancers[0].DNSName" --output text 2>/dev/null || echo "")

          if [[ -n "$CURRENT_ALB_DNS" ]]; then
            sed -i "s/dummy-placeholder/$CURRENT_ALB_DNS/" change-batch.json

            aws route53 change-resource-record-sets \
              --hosted-zone-id "${{ secrets.AWS_HOSTED_ZONE_ID }}" \
              --change-batch file://change-batch.json
          else
            echo "⚠️ ALB DNS not found — skipping Route 53 deletion."
          fi
