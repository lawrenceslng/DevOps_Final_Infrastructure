name: Handle Microservice Promotion

on:
  repository_dispatch:
    types: [service-updated]

jobs:
  promote-service:
    runs-on: ubuntu-latest

    steps:
      - name: Print incoming service info
        run: |
          echo "Service: ${{ github.event.client_payload.service }}"
          echo "Branch: ${{ github.event.client_payload.branch }}"
          echo "Version: ${{ github.event.client_payload.version }}"
          echo "Commit SHA: ${{ github.event.client_payload.commit_sha }}"

      - name: Checkout the service repo
        uses: actions/checkout@v4
        with:
          repository: lawrenceslng/${{ github.event.client_payload.service }}
          path: Service
          ref: ${{ github.event.client_payload.branch }}
          token: ${{ secrets.INFRA_REPO_PAT }}

      - name: Checkout Infra repo
        uses: actions/checkout@v4
        with:
          path: Infra
          token: ${{ secrets.INFRA_REPO_PAT }}

      - name: Map repo name to service name
        id: map-service
        run: |
          REPO_NAME="${{ github.event.client_payload.service }}"

          # Default mapping logic
          if [[ "$REPO_NAME" == "DevOps_Final_Frontend" ]]; then
            SERVICE_NAME="frontend"
          elif [[ "$REPO_NAME" == "DevOps_Final_Cart_Service" ]]; then
            SERVICE_NAME="cart-service"
          elif [[ "$REPO_NAME" == "DevOps_Final_Product_Service" ]]; then
            SERVICE_NAME="product-service"
          elif [[ "$REPO_NAME" == "DevOps_Final_Order_Service" ]]; then
            SERVICE_NAME="order-service"
          else
            echo "‚ùå Unknown service repo: $REPO_NAME"
            exit 1
          fi

          echo "service_name=$SERVICE_NAME" >> "$GITHUB_ENV"

      - name: Compare versions and trigger deployment
        id: compare-versions
        run: |
          SERVICE="${{ env.service_name }}"
          NEW_VERSION="${{ github.event.client_payload.version }}"
          COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"

          echo "Loaded service: $SERVICE"
          echo "Incoming VERSION: $NEW_VERSION"

          # Load stored version
          STORED_VERSION=$(jq -r ".\"$SERVICE\".latest_version" Infra/services.json)
          echo "Stored VERSION: $STORED_VERSION"

          # Default to no change
          echo "changed=false" >> $GITHUB_ENV
          echo "shutdown_uat=false" >> $GITHUB_ENV

          if [ "$NEW_VERSION" = "$STORED_VERSION" ]; then
            echo "‚úÖ Versions match, no action needed."
            exit 0
          fi

          # Versions are different ‚Üí deploy needed
          echo "changed=true" >> $GITHUB_ENV

          echo "Versions do not match, deciding on deployment"

          # Decide what kind of deployment to trigger
          if [[ "$NEW_VERSION" == *-rc* ]]; then
            echo "üöÄ New RC detected after QA: triggering Deploy to UAT!"
            # TODO: Trigger deploy to UAT

            # Trigger Deploy to UAT workflow by repository_dispatch
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.INFRA_REPO_PAT }}" \
              https://api.github.com/repos/lawrenceslng/DevOps_Final_Infrastructure/dispatches \
              -d '{
                "event_type": "uat-deploy",
                "client_payload": {
                  "service": "'"$SERVICE"'",
                  "version": "'"$NEW_VERSION"'"
                }
              }'

            # Trigger QA Destroy workflow by repository_dispatch
            echo "üßπ Destroying QA resources..."
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.INFRA_REPO_PAT }}" \
              https://api.github.com/repos/lawrenceslng/DevOps_Final_Infrastructure/dispatches \
              -d '{
                "event_type": "destroy-qa"
              }'

          elif [[ "$NEW_VERSION" == *-green && "$STORED_VERSION" == *-rc* ]]; then
            echo "üöÄ Green version detected after RC: triggering Green Deploy to Prod!"
            # TODO: Trigger Green Deploy
            
            # Trigger Deploy to Green workflow by repository_dispatch
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.INFRA_REPO_PAT }}" \
              https://api.github.com/repos/lawrenceslng/DevOps_Final_Infrastructure/dispatches \
              -d '{
                "event_type": "switch-service-to-green",
                "client_payload": {
                  "service": "'"$SERVICE"'",
                  "version": "'"$NEW_VERSION"'"
                }
              }'

            echo "shutdown_uat=true" >> $GITHUB_ENV


          elif [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            NEW_BASE_VERSION="${BASH_REMATCH[1]}"

            if [[ "$STORED_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-green$ ]]; then
              STORED_BASE_VERSION="${BASH_REMATCH[1]}"

              if [[ "$NEW_BASE_VERSION" == "$STORED_BASE_VERSION" ]]; then
                echo "üöÄ Stable version detected after Green: triggering Blue Deploy to Prod!"
                # Trigger Blue Deploy

                # Trigger Deploy to Green workflow by repository_dispatch
                curl -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ secrets.INFRA_REPO_PAT }}" \
                  https://api.github.com/repos/lawrenceslng/DevOps_Final_Infrastructure/dispatches \
                  -d '{
                    "event_type": "promote-green-to-blue",
                    "client_payload": {
                      "service": "'"$SERVICE"'",
                      "version": "'"$NEW_VERSION"'"
                    }
                  }'

              else
                echo "‚ùå Version numbers do not match between NEW and STORED, no Blue Deploy!"
                exit 1
              fi
          else
            echo "‚ö†Ô∏è No matching promotion logic found for these versions."
            exit 1
          fi

          # Update Infra/services.json with the new version and commit
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          jq --arg svc "$SERVICE" \
             --arg ver "$NEW_VERSION" \
             --arg sha "$COMMIT_SHA" \
             --arg now "$NOW" \
             '.[$svc].latest_version = $ver | .[$svc].last_commit = $sha | .[$svc].last_deploy = $now' \
             Infra/services.json > Infra/services.tmp.json

          mv Infra/services.tmp.json Infra/services.json

      # - name: Commit updated services.json
      #   if: env.changed == 'true'
      #   run: |
      #     cd Infra

      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"

      #     git add services.json

      #     if ! git diff --cached --quiet; then
      #       git commit -m "Update services.json after promotion of ${{ github.event.client_payload.service }}"
      #       git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/your-org/infra-repo.git
      #       git push origin HEAD
      #     else
      #       echo "‚ö†Ô∏è No changes to commit in services.json"
      #     fi

      - name: Commit updated services.json
        if: env.changed == 'true'
        run: |
          cd Infra

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add services.json

          if ! git diff --cached --quiet; then
            git commit -m "Update services.json after promotion of ${{ github.event.client_payload.service }}"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/lawrenceslng/DevOps_Final_Infrastructure.git

            # Try pushing, if fail then rebase and push again
            for i in {1..3}; do
              if git push origin HEAD; then
                echo "‚úÖ Successfully pushed services.json!"
                break
              else
                echo "‚ö†Ô∏è Push failed, trying to rebase and retry ($i)..."
                git pull --rebase origin main
              fi
            done
          else
            echo "‚ö†Ô∏è No changes to commit in services.json"
          fi

      - name: Setup kubectl
        if: env.shutdown_uat == 'true'
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl to EKS
        if: env.shutdown_uat == 'true'
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_ACCOUNT_REGION }} --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      - name: Shut Down UAT Namespace
        if: env.shutdown_uat == 'true'
        run: |
            echo "üßπ Shutting down UAT resources..."

            kubectl delete namespace uat